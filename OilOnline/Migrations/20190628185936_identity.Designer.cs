// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OilOnline.Data;

namespace OilOnline.Migrations
{
    [DbContext(typeof(OilOnlineContext))]
    [Migration("20190628185936_identity")]
    partial class identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OilOnline.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsMechanic");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PhotoURL");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OilOnline.Models.OilType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<double>("PricePerQuart");

                    b.HasKey("Id");

                    b.ToTable("Oil Type");
                });

            modelBuilder.Entity("OilOnline.Models.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardHolder");

                    b.Property<int>("CardNumber");

                    b.Property<int>("CustomerId");

                    b.Property<string>("CustomerId1");

                    b.Property<string>("ExpirationDate");

                    b.Property<int>("SecurityNumber");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId1");

                    b.ToTable("Payment Type");
                });

            modelBuilder.Entity("OilOnline.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateAndTime");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MechanicId");

                    b.Property<string>("MechanicId1");

                    b.Property<int>("PaymentTypeId");

                    b.Property<int>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("MechanicId1");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("OilOnline.Models.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId");

                    b.Property<string>("CustomerId1");

                    b.Property<string>("Make");

                    b.Property<string>("Model");

                    b.Property<int>("OilTypeId");

                    b.Property<string>("PhotoURL");

                    b.Property<string>("PlateNumber");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("OilTypeId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("OilOnline.Models.PaymentType", b =>
                {
                    b.HasOne("OilOnline.Models.ApplicationUser", "Customer")
                        .WithMany("PaymentTypes")
                        .HasForeignKey("CustomerId1");
                });

            modelBuilder.Entity("OilOnline.Models.Request", b =>
                {
                    b.HasOne("OilOnline.Models.ApplicationUser", "Mechanic")
                        .WithMany("Requests")
                        .HasForeignKey("MechanicId1");

                    b.HasOne("OilOnline.Models.PaymentType", "paymentType")
                        .WithMany()
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OilOnline.Models.Vehicle", "vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OilOnline.Models.Vehicle", b =>
                {
                    b.HasOne("OilOnline.Models.ApplicationUser", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("OilOnline.Models.OilType", "Oil")
                        .WithMany()
                        .HasForeignKey("OilTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
